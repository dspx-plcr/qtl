(claim Class (Type 0))
(claim Class.ceo Class)
(claim Class.executive Class)
(claim Class.manager Class)
(claim Class.worker Class)
(alias Class.ceo (prim))
(alias Class.executive (prim))
(alias Class.manager (prim))
(alias Class.worker (prim))
(alias Class (sum Class.ceo Class.executive Class.manager Class.worker))

(claim Nat (Type 0))
(claim Nat.zero Nat)
(claim Nat.succ (-> Nat Nat))
(alias Nat.zero (prim))
(alias Nat.succ (prim Nat))
(alias Nat (sum Nat.zero Nat.succ))

(claim Maybe (-> (Type 0) (Type 0)))
(claim Maybe.nothing (-> (: A (Type 0))
	(Maybe A)))
(claim Maybe.just (-> (: A (Type 0))
	(-> A Maybe A)))
(alias Maybe.nothing (lambda (A) (prim)))
(alias Maybe.just (lambda (A) (prim A)))
(alias Maybe (lambda (A) (sum (Maybe.nothing A) (Maybe.just A))))

(claim Vect (-> (Type 0) Nat (Type 0)))
(claim Vect.nil (-> (: A (Type 0))
	(Vect A zero)))
(claim Vect.cons (-> (: A (Type 0)) (: n Nat)
	(-> A (Vect A n) (Vect A (succ n)))))
(alias Vect.nil (lambda (A) (prim)))
(alias Vect.cons (lambda (A n) (prim A (Vect A n))))
(alias Vect (lambda (A n) (sum (Vect.nil A) (Vect.cons A n))))

(claim Vect.head (-> (: A (Type 0)) (: n Nat) (Vect A n) (Maybe A)))
(alias Vect.head (lambda (A n xs)
	(match (Nat (Vect A n)) (n xs)
		((Nat.zero _)
			(Maybe.nothing A))
		(((Nat.succ n) (Vect.cons x xs))
			(Maybe.just A x)))))

(claim pred (-> (: n Nat) (> n zero) Nat))
(alias pred (lambda (n pf)
	(match Nat n
		(Nat.zero (absurd pf))
		((Nat.succ m) m))))

(claim map (-> (: A (Type 0)) (: B (Type 0)) (: n Nat)
	(-> A B) (Vect A n) (Vect B n)))
(alias map (lambda (A B n f xs)
	(match (Nat (Vect A n)) (n xs)
		((Nat.zero _)
			(Vect.nil B))
		(((Nat.succ m) (Vect.cons x xs))
			((Vect.cons B n) (f x) (map A B m f xs))))))
